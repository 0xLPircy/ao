"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VM2Plugin = void 0;
const warp_contracts_1 = require("warp-contracts");
const vm2 = __importStar(require("vm2"));
// 'require' to fix esbuild adding same lib in both cjs and esm format
// https://github.com/evanw/esbuild/issues/1950
// eslint-disable-next-line
const BigNumber = require('bignumber.js');
class VM2Plugin {
    process(input) {
        const { normalizedSource, logger, swGlobal, contractDefinition } = input;
        const vmScript = new vm2.VMScript(normalizedSource);
        const typedArrays = {
            Int8Array: Int8Array,
            Uint8Array: Uint8Array,
            Uint8ClampedArray: Uint8ClampedArray,
            Int16Array: Int16Array,
            Uint16Array: Uint16Array,
            Int32Array: Int32Array,
            Uint32Array: Uint32Array,
            Float32Array: Float32Array,
            Float64Array: Float64Array,
            BigInt64Array: BigInt64Array,
            BigUint64Array: BigUint64Array
        };
        const vm = new vm2.NodeVM({
            console: 'off',
            sandbox: {
                SmartWeave: swGlobal,
                BigNumber: BigNumber,
                logger: logger,
                ContractError: warp_contracts_1.ContractError,
                ContractAssert: function (cond, message) {
                    if (!cond)
                        throw new warp_contracts_1.ContractError(message);
                },
                //https://github.com/patriksimek/vm2/issues/484#issuecomment-1327479592
                ...typedArrays
            },
            compiler: 'javascript',
            eval: false,
            allowAsync: true,
            wasm: false,
            wrapper: 'commonjs'
        });
        return new warp_contracts_1.JsHandlerApi(swGlobal, contractDefinition, vm.run(vmScript));
    }
    type() {
        return 'vm2';
    }
}
exports.VM2Plugin = VM2Plugin;
//# sourceMappingURL=index.js.map